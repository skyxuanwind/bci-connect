import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import axios from '../config/axios';
import LoadingSpinner from '../components/LoadingSpinner';
import { motion, AnimatePresence } from 'framer-motion';
import {
  PlusIcon,
  TrashIcon,
  EyeIcon,
  DocumentDuplicateIcon,
  Bars3Icon,
  PhotoIcon,
  LinkIcon,
  PlayIcon,
  MapPinIcon,
  ChatBubbleLeftRightIcon,
  PencilIcon,
  CheckIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import {
  FaLinkedin,
  FaFacebook,
  FaTwitter,
  FaInstagram,
  FaYoutube,
  FaTiktok
} from 'react-icons/fa';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import '../styles/templates.css';

// 解析 YouTube 影片網址取得 videoId（支援 watch?v=、youtu.be、embed、shorts 等格式）
const getYouTubeVideoId = (url) => {
  if (!url || typeof url !== 'string') return '';
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\n?#\/]+)/,
    /youtube\.com\/embed\/([^&\n?#\/]+)/,
    /youtube\.com\/shorts\/([^&\n?#\/]+)/
  ];
  for (const p of patterns) {
    const m = url.match(p);
    if (m && m[1]) return m[1];
  }
  // 退而求其次：嘗試最後一段 path
  try {
    const u = new URL(url);
    const v = u.searchParams.get('v');
    if (v) return v;
    const parts = u.pathname.split('/').filter(Boolean);
    return parts[parts.length - 1] || '';
  } catch {
    return '';
  }
};

const NFCCardEditor = () => {
  const { user } = useAuth();
  const [cardConfig, setCardConfig] = useState(null);
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  // 移除預覽模式狀態
  const [editingBlock, setEditingBlock] = useState(null);
  const [showAddBlockModal, setShowAddBlockModal] = useState(false);
  // 自動帶入個人資料控制，避免重複插入
  const [autoProfileApplied, setAutoProfileApplied] = useState(false);
  // 提示視窗狀態
  const [showSuccessToast, setShowSuccessToast] = useState(false);

  useEffect(() => {
    fetchCardData();
    fetchTemplates();
  }, []);

  // 用於插入或更新自動生成的個資區塊（以 custom_styles.autoKey 標記）
  const upsertAutoBlock = (blocks, autoKey, makeBlockData, matchFn) => {
    // 先用 autoKey 嘗試定位
    let idx = blocks.findIndex(b => b?.custom_styles?.autoKey === autoKey);

    // 若後端未保存 custom_styles，使用 matchFn 嘗試比對既有區塊
    if (idx < 0 && typeof matchFn === 'function') {
      idx = blocks.findIndex(matchFn);
    }

    const baseBlock = makeBlockData();
    if (!baseBlock) return { updated: false };

    if (idx >= 0) {
      const existing = blocks[idx];
      blocks[idx] = {
        ...existing,
        content_type: baseBlock.content_type || existing.content_type,
        content_data: {
          ...(existing?.content_data || {}),
          ...(baseBlock.content_data || {})
        },
        is_visible: existing.is_visible !== undefined ? existing.is_visible : true,
        custom_styles: { ...(existing.custom_styles || {}), autoKey, autoGenerated: true }
      };
      return { updated: true };
    } else {
      blocks.unshift({
        id: `${autoKey}-${Date.now()}`,
        content_type: baseBlock.content_type,
        content_data: baseBlock.content_data,
        display_order: 0,
        is_visible: true,
        custom_styles: { autoKey, autoGenerated: true }
      });
      return { updated: true };
    }
  };

  // 當用戶與卡片資料可用時，自動帶入姓名、公司、產業別、電話、信箱與大頭貼
  useEffect(() => {
    if (!user || !cardConfig || loading) return;

    if (autoProfileApplied) return;

    let blocks = Array.isArray(cardConfig.content_blocks) ? [...cardConfig.content_blocks] : [];

    // 僅在卡片尚未添加任何內容區塊時自動帶入，避免影響既有內容
    if (blocks.length > 0) {
      setAutoProfileApplied(true);
      return;
    }

    const createdOrUpdated = [];

    // 大頭貼（image）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:avatar',
        () => {
          const url = user.profilePictureUrl || '';
          if (!url) return null;
          return {
            content_type: 'image',
            content_data: {
              title: '大頭貼',
              url,
              alt: user.name || '大頭貼'
            }
          };
        },
        (b) => b?.content_type === 'image' && b?.content_data?.url === (user.profilePictureUrl || '')
      )
    );

    // 姓名（text）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:name',
        () => {
          const name = user.name || '';
          if (!name) return null;
          return {
            content_type: 'text',
            content_data: {
              title: '姓名',
              content: name
            }
          };
        },
        (b) => b?.content_type === 'text' && (b?.content_data?.content || '') === (user.name || '')
      )
    );

    // 公司 / 職稱（text）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:companyTitle',
        () => {
          const company = user.company || '';
          const title = user.title || '';
          const content = [company, title].filter(Boolean).join('｜');
          if (!content) return null;
          return {
            content_type: 'text',
            content_data: {
              title: '公司 / 職稱',
              content
            }
          };
        },
        (b) => b?.content_type === 'text' && (b?.content_data?.title === '公司 / 職稱')
      )
    );

    // 產業別（text）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:industry',
        () => {
          const industry = user.industry || '';
          if (!industry) return null;
          return {
            content_type: 'text',
            content_data: {
              title: '產業別',
              content: industry
            }
          };
        },
        (b) => b?.content_type === 'text' && (b?.content_data?.title === '產業別')
      )
    );

    // 電話（link, tel:）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:phone',
        () => {
          const phone = user.contactNumber || '';
          if (!phone) return null;
          return {
            content_type: 'link',
            content_data: {
              title: '電話',
              url: `tel:${phone}`
            }
          };
        },
        (b) => b?.content_type === 'link' && (b?.content_data?.url || '').startsWith('tel:')
      )
    );

    // 信箱（link, mailto:）
    createdOrUpdated.push(
      upsertAutoBlock(
        blocks,
        'auto:email',
        () => {
          const email = user.email || '';
          if (!email) return null;
          return {
            content_type: 'link',
            content_data: {
              title: '信箱',
              url: `mailto:${email}`
            }
          };
        },
        (b) => b?.content_type === 'link' && (b?.content_data?.url || '').startsWith('mailto:')
      )
    );

    const anyChanged = createdOrUpdated.some(r => r && r.updated);
    if (anyChanged) {
      const recomputed = blocks.map((b, i) => ({ ...b, display_order: i }));

      setCardConfig(prev => ({
        ...prev,
        content_blocks: recomputed
      }));
    }

    setAutoProfileApplied(true);
  }, [user, cardConfig, loading, autoProfileApplied]);

  // 將後端內容列轉換為前端需要的內容區塊結構
  const mapRowToBlock = (row) => {
    const type = row.content_type || row.block_type;
    let data = {};
    try {
      switch (type) {
        case 'text':
          data = {
            title: row.title || row.content_data?.title || '',
            content: row.content || row.content_data?.content || ''
          };
          break;
        case 'link':
          data = {
            title: row.title || row.content_data?.title || '',
            url: row.url || row.content_data?.url || ''
          };
          break;
        case 'video':
          data = {
            title: row.title || row.content_data?.title || '',
            type: row.video_type || row.content_data?.type || (row.url ? 'youtube' : ((row.file_url || row.file || row.content_data?.file) ? 'upload' : 'youtube')),
            url: row.url || row.content_data?.url || '',
            file: row.file_url || row.file || row.content_data?.file || '',
            videoId: row.video_id || row.content_data?.videoId || getYouTubeVideoId(row.url || row.content_data?.url || '')
          };
          break;
        case 'image':
          data = {
            url: row.image_url || row.url || row.content_data?.url || '',
            alt: row.title || row.content_data?.alt || '',
            caption: row.content_data?.caption || ''
          };
          break;
        case 'social': {
          const parsed = typeof row.content === 'string' ? (() => { try { return JSON.parse(row.content); } catch { return {}; } })() : (row.content || row.content_data || {});
          data = parsed || {};
          break;
        }
        case 'map':
          data = {
            address: row.map_address || row.content_data?.address || '',
            map_url: row.url || row.content_data?.map_url || '',
            coordinates: row.map_coordinates || row.content_data?.coordinates || null
          };
          break;
        default:
          data = row.content_data || {};
      }
    } catch (e) {
      data = row.content_data || {};
    }

    return {
      id: row.id,
      content_type: type,
      content_data: data,
      display_order: row.display_order ?? 0,
      is_visible: row.is_visible ?? true,
      custom_styles: row.custom_styles || {}
    };
  };

  const fetchCardData = async () => {
    try {
      const response = await axios.get('/api/nfc-cards/my-card');
      const data = response.data || {};

      // 兼容不同返回結構：優先使用 cardConfig，其次使用 card 或直接使用根對象
      const card = data.cardConfig || data.card || data;
      const content = (card && (card.content_blocks || card.content)) || [];

      if (card && card.template_id !== undefined) {
        const mappedBlocks = Array.isArray(content) ? content.map(mapRowToBlock) : [];
        setCardConfig({
          template_id: card.template_id || null,
          template_name: card.template_name || '',
          custom_css: card.custom_css || '',
          content_blocks: mappedBlocks
        });
      } else {
        setCardConfig({
          template_id: null,
          template_name: '',
          custom_css: '',
          content_blocks: []
        });
      }
    } catch (error) {
      console.error('獲取名片配置失敗:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchTemplates = async () => {
    try {
      const response = await axios.get('/api/nfc-cards/templates');
      const list = response.data?.templates || response.data?.data || [];
      // 去重（按名稱），但保留完整的模板數據
      const seen = new Map();
      const unique = [];
      for (const t of list) {
        if (!seen.has(t.name)) {
          seen.set(t.name, t);
          unique.push(t);
        } else {
          // 如果已存在同名模板，但當前模板有preview_image_url而已存在的沒有，則替換
          const existing = seen.get(t.name);
          if (t.preview_image_url && !existing.preview_image_url) {
            const index = unique.findIndex(item => item.name === t.name);
            if (index !== -1) {
              unique[index] = t;
              seen.set(t.name, t);
            }
          }
        }
      }
      
      setTemplates(unique);
    } catch (error) {
      console.error('獲取模板失敗:', error);
    }
  };

  const handleSaveBasicInfo = async () => {
    try {
      setSaving(true);
      await axios.put('/api/nfc-cards/my-card', {
        template_id: cardConfig.template_id,
        custom_css: cardConfig.custom_css
      });
      alert('基本設定保存成功！');
    } catch (error) {
      console.error('保存失敗:', error);
      alert('保存失敗，請稍後再試');
    } finally {
      setSaving(false);
    }
  };

  const handleSaveContent = async () => {
    try {
      setSaving(true);
      await axios.post('/api/nfc-cards/my-card/content', {
        content_blocks: (cardConfig.content_blocks || []).map((b, i) => ({
          ...b,
          display_order: i
        }))
      });
      alert('內容保存成功！');
    } catch (error) {
      console.error('保存內容失敗:', error);
      alert('保存失敗，請稍後再試');
    } finally {
      setSaving(false);
    }
  };

  const handleTemplateChange = (templateId) => {
    const template = templates.find(t => t.id === templateId);
    setCardConfig({
      ...cardConfig,
      template_id: templateId,
      template_name: template?.name,
      css_config: template?.css_config || '',
      custom_css: cardConfig?.custom_css || ''
    });
  };

  const handleAddContentBlock = (blockType) => {
    const newBlock = {
      id: Date.now(),
      content_type: blockType,
      content_data: getDefaultContentData(blockType),
      display_order: (cardConfig.content_blocks || []).length,
      is_visible: true,
      custom_styles: {}
    };
    
    setCardConfig({
      ...cardConfig,
      content_blocks: [...(cardConfig.content_blocks || []), newBlock]
    });
    
    setShowAddBlockModal(false);
    
    // 顯示成功提示
    setShowSuccessToast(true);
    setTimeout(() => {
      setShowSuccessToast(false);
    }, 1000);
  };

  const getDefaultContentData = (blockType) => {
    switch (blockType) {
      case 'text':
        return { title: '標題', content: '內容描述' };
      case 'link':
        return { title: '連結標題', url: 'https://example.com' };
      case 'video':
        return { title: '影片標題', type: 'youtube', url: '', file: '', videoId: '' };
      case 'image':
        return { title: '圖片標題', url: '', alt: '圖片描述' };
      case 'social':
        return { linkedin: '', facebook: '', instagram: '', twitter: '', youtube: '', tiktok: '' };
      case 'map':
        return { title: '地點名稱', address: '完整地址', map_url: '', coordinates: null };
      default:
        return {};
    }
  };

  const handleDeleteBlock = (blockIndex) => {
    const updatedBlocks = cardConfig.content_blocks
      .filter((_, index) => index !== blockIndex)
      .map((b, i) => ({ ...b, display_order: i }));
    setCardConfig({
      ...cardConfig,
      content_blocks: updatedBlocks
    });
  };

  const handleEditBlock = (blockIndex, newData) => {
    const updatedBlocks = [...cardConfig.content_blocks];
    updatedBlocks[blockIndex] = {
      ...updatedBlocks[blockIndex],
      content_data: newData
    };
    setCardConfig({
      ...cardConfig,
      content_blocks: updatedBlocks
    });
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;

    const items = Array.from(cardConfig.content_blocks);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    // 更新 display_order
    const updatedItems = items.map((item, index) => ({
      ...item,
      display_order: index
    }));

    setCardConfig({
      ...cardConfig,
      content_blocks: updatedItems
    });
  };

  const copyCardUrl = () => {
    const cardUrl = `${window.location.origin}/member-card/${user.id}`;
    navigator.clipboard.writeText(cardUrl);
    alert('名片網址已複製到剪貼板！');
  };

  const renderBlockEditor = (block, index) => {
    const isEditing = editingBlock === index;
    
    return (
      <Draggable key={block.id || index} draggableId={String(block.id || index)} index={index}>
        {(provided) => (
          <div
            ref={provided.innerRef}
            {...provided.draggableProps}
            className="bg-white border border-gray-200 rounded-lg p-4 mb-4 shadow-sm"
          >
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <div {...provided.dragHandleProps}>
                  <Bars3Icon className="h-5 w-5 text-gray-400 cursor-move" />
                </div>
                <span className="font-medium text-gray-700 capitalize">
                  {getBlockTypeLabel(block.content_type)}
                </span>
              </div>
              
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setEditingBlock(isEditing ? null : index)}
                  className="p-1 text-blue-600 hover:bg-blue-50 rounded"
                >
                  {isEditing ? <CheckIcon className="h-4 w-4" /> : <PencilIcon className="h-4 w-4" />}
                </button>
                <button
                  onClick={() => handleDeleteBlock(index)}
                  className="p-1 text-red-600 hover:bg-red-50 rounded"
                >
                  <TrashIcon className="h-4 w-4" />
                </button>
              </div>
            </div>
            
            {isEditing ? (
              <BlockContentEditor 
                block={block}
                onSave={(newData) => {
                  handleEditBlock(index, newData);
                  setEditingBlock(null);
                }}
                onCancel={() => setEditingBlock(null)}
              />
            ) : (
              <BlockPreview block={block} />
            )}
          </div>
        )}
      </Draggable>
    );
  };

  const getBlockTypeLabel = (type) => {
    const labels = {
      text: '文字',
      link: '連結',
      video: '影片',
      image: '圖片',
      social: '社群',
      map: '地圖'
    };
    return labels[type] || type;
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner size="large" />
      </div>
    );
  }

  const selectedTemplate = templates.find(t => t.id === cardConfig?.template_id);
  const selectedPreview = selectedTemplate?.preview_image_url || '/nfc-templates/placeholder.svg';

  return (
    <div className="min-h-screen bg-gradient-to-br from-black to-gray-900">
      {/* 頂部操作欄 */}
      <div className="bg-gradient-to-r from-black/90 to-gray-900/90 border-b border-yellow-500/30 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-2xl font-bold text-gray-900">電子名片編輯器</h1>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={copyCardUrl}
                className="flex items-center px-4 py-2 text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
              >
                <DocumentDuplicateIcon className="h-4 w-4 mr-2" />
                複製名片網址
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* 編輯模式 - 三欄布局：基本設定、內容編輯、即時預覽 */}
          <div className="grid grid-cols-1 xl:grid-cols-12 gap-6">
            {/* 左側：基本設定 */}
            <div className="xl:col-span-3">
              <div className="bg-gradient-to-br from-black/85 to-gray-900/85 border border-yellow-500/30 rounded-lg shadow-sm p-6 mb-6">
                <h2 className="text-lg font-semibold text-gold-100 mb-4">基本設定</h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gold-300 mb-2">
                      選擇模板
                    </label>
                    <select
                      value={cardConfig?.template_id || ''}
                      onChange={(e) => handleTemplateChange(parseInt(e.target.value))}
                      className="w-full px-3 py-2 bg-black/40 border border-gold-600 rounded-lg text-gold-100 focus:ring-2 focus:ring-gold-500 focus:border-gold-400"
                    >
                      {templates.map(template => (
                        <option key={template.id} value={template.id} className="bg-black text-gold-100">
                          {template.name}
                        </option>
                      ))}
                    </select>
                    {/* 模板預覽 */}
                    <div className="mt-3">
                      <div className="text-sm text-gold-300 mb-2">模板預覽</div>
                      <div className="border border-gold-600 bg-black/20 rounded-lg p-3 flex items-center space-x-3">
                        <img src={selectedPreview} alt="模板預覽" className="w-20 h-14 object-cover rounded border border-gold-600" />
                        <div>
                          <div className="font-medium text-gold-100">{selectedTemplate?.name || '未選擇模板'}</div>
                          <div className="text-xs text-gold-400">{selectedTemplate?.description || '請選擇一個模板以查看預覽'}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <button
                    onClick={handleSaveBasicInfo}
                    disabled={saving}
                    className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"
                  >
                    {saving ? '保存中...' : '保存基本設定'}
                  </button>
                </div>
              </div>
              
              {/* 添加內容區塊 */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">添加內容</h2>
                
                <div className="grid grid-cols-2 gap-3">
                  {[
                    { type: 'text', icon: ChatBubbleLeftRightIcon, label: '文字' },
                    { type: 'link', icon: LinkIcon, label: '連結' },
                    { type: 'video', icon: PlayIcon, label: '影片' },
                    { type: 'image', icon: PhotoIcon, label: '圖片' },
                    { type: 'social', icon: ChatBubbleLeftRightIcon, label: '社群' },
                    { type: 'map', icon: MapPinIcon, label: '地圖' }
                  ].map(({ type, icon: Icon, label }) => (
                    <button
                      key={type}
                      onClick={() => handleAddContentBlock(type)}
                      className="flex flex-col items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <Icon className="h-6 w-6 text-gray-600 mb-1" />
                      <span className="text-sm text-gray-700">{label}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>
            
            {/* 中間：內容編輯 */}
            <div className="xl:col-span-5">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-lg font-semibold text-gray-900">內容區塊</h2>
                  <button
                    onClick={handleSaveContent}
                    disabled={saving}
                    className="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 disabled:opacity-50 transition-colors"
                  >
                    {saving ? '保存中...' : '保存內容'}
                  </button>
                </div>
                
                {cardConfig?.content_blocks && cardConfig.content_blocks.length > 0 ? (
                  <DragDropContext onDragEnd={handleDragEnd}>
                    <Droppable droppableId="content-blocks">
                      {(provided) => (
                        <div
                          {...provided.droppableProps}
                          ref={provided.innerRef}
                        >
                          {cardConfig.content_blocks.map((block, index) => 
                            renderBlockEditor(block, index)
                          )}
                          {provided.placeholder}
                        </div>
                      )}
                    </Droppable>
                  </DragDropContext>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <PhotoIcon className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p>尚未添加任何內容區塊</p>
                    <p className="text-sm">點擊左側按鈕開始添加內容</p>
                  </div>
                )}
              </div>
            </div>
            
            {/* 右側：即時預覽 */}
            <div className="xl:col-span-4">
              <div className="bg-gradient-to-br from-black/85 to-gray-900/85 border border-yellow-500/30 rounded-lg shadow-sm p-6 sticky top-8">
                <h2 className="text-lg font-semibold text-gold-100 mb-4 flex items-center">
                  <EyeIcon className="h-5 w-5 mr-2 text-gold-400" />
                  即時預覽
                </h2>
                
                <div className="border border-gold-600 rounded-lg overflow-hidden min-h-[32rem] max-h-[32rem] overflow-y-auto">
                  {/* 套用模板樣式的預覽 */}
                  <TemplatePreview 
                    template={selectedTemplate}
                    cardConfig={cardConfig}
                  />
                  
                  <div className="p-4 bg-black/20 border-t border-gold-600 text-center">
                    <a 
                      href={`/member-card/${user?.id}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center px-3 py-1.5 bg-gradient-to-r from-yellow-600 to-yellow-500 text-black font-medium text-sm rounded-lg hover:from-yellow-500 hover:to-yellow-400 transition-all duration-200 shadow-lg"
                    >
                      <EyeIcon className="h-3 w-3 mr-1" />
                      完整版本
                    </a>
                  </div>
                </div>
                
                <div className="mt-4 text-xs text-gold-300 text-center">
                  💡 修改會即時反映在預覽中
                </div>
              </div>
            </div>
          </div>
      </div>

      {/* 成功提示視窗 */}
      <AnimatePresence>
        {showSuccessToast && (
          <motion.div
            className="fixed top-5 right-5 z-50 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2"
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -50 }}
            transition={{ duration: 0.3 }}
          >
            <span className="text-lg">✓</span>
            <span>已添加</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// 區塊內容編輯器組件
const BlockContentEditor = ({ block, onSave, onCancel }) => {
  const [data, setData] = useState(block.content_data || {});

  const handleSave = () => {
    onSave(data);
  };

  const renderEditor = () => {
    switch (block.content_type) {
      case 'text':
        return (
          <div className="space-y-3">
            <input
              type="text"
              value={data.title || ''}
              onChange={(e) => setData({ ...data, title: e.target.value })}
              placeholder="標題"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <textarea
              value={data.content || ''}
              onChange={(e) => setData({ ...data, content: e.target.value })}
              placeholder="內容"
              rows={3}
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
          </div>
        );
      
      case 'link':
        return (
          <div className="space-y-3">
            <input
              type="text"
              value={data.title || ''}
              onChange={(e) => setData({ ...data, title: e.target.value })}
              placeholder="連結標題"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <input
              type="url"
              value={data.url || ''}
              onChange={(e) => setData({ ...data, url: e.target.value })}
              placeholder="https://example.com"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
          </div>
        );
      
      case 'video':
        return (
          <div className="space-y-3">
            <input
              type="text"
              value={data.title || ''}
              onChange={(e) => setData({ ...data, title: e.target.value })}
              placeholder="影片標題"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <select
              value={data.type || 'youtube'}
              onChange={(e) => setData({ ...data, type: e.target.value })}
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            >
              <option value="youtube">YouTube</option>
              <option value="upload">上傳影片</option>
            </select>
            {data.type === 'youtube' ? (
              <input
                type="text"
                value={data.url || ''}
                onChange={(e) => {
                  const url = e.target.value;
                  setData({ ...data, url, videoId: getYouTubeVideoId(url) });
                }}
                placeholder="YouTube 網址 (例如: https://www.youtube.com/watch?v=dQw4w9WgXcQ)"
                className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
              />
            ) : (
              <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                <input
                  type="file"
                  accept="video/*"
                  onChange={(e) => {
                    const file = e.target.files[0];
                    if (file) {
                      // 這裡可以實現文件上傳邏輯
                      setData({ ...data, file: file.name });
                    }
                  }}
                  className="hidden"
                  id={`video-upload-${block.id}`}
                />
                <label htmlFor={`video-upload-${block.id}`} className="cursor-pointer">
                  <PlayIcon className="h-8 w-8 mx-auto mb-2 text-amber-400" />
                  <p className="text-sm text-amber-200">點擊上傳影片文件</p>
                  {data.file && <p className="text-xs text-amber-400 mt-1">已選擇: {data.file}</p>}
                </label>
              </div>
            )}
          </div>
        );
      
      case 'image':
        return (
          <div className="space-y-3">
            <input
              type="text"
              value={data.title || ''}
              onChange={(e) => setData({ ...data, title: e.target.value })}
              placeholder="圖片標題"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <input
                type="file"
                accept="image/*"
                onChange={(e) => {
                  const file = e.target.files[0];
                  if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                      setData({ ...data, url: e.target.result, alt: file.name });
                    };
                    reader.readAsDataURL(file);
                  }
                }}
                className="hidden"
                id={`image-upload-${block.id}`}
              />
              <label htmlFor={`image-upload-${block.id}`} className="cursor-pointer">
                {data.url ? (
                  <div>
                    <img src={data.url} alt={data.alt} className="max-w-full h-32 object-cover mx-auto rounded" />
                    <p className="text-xs text-green-600 mt-2">點擊更換圖片</p>
                  </div>
                ) : (
                  <div>
                    <PhotoIcon className="h-8 w-8 mx-auto mb-2 text-amber-400" />
                    <p className="text-sm text-amber-200">點擊上傳圖片</p>
                  </div>
                )}
              </label>
            </div>
            <input
              type="text"
              value={data.alt || ''}
              onChange={(e) => setData({ ...data, alt: e.target.value })}
              placeholder="圖片描述"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
          </div>
        );
      
      case 'social':
        return (
          <div className="space-y-3">
            <h4 className="font-medium text-amber-200 mb-3">社群媒體連結</h4>
            {[
              { key: 'linkedin', name: 'LinkedIn', icon: <FaLinkedin />, color: 'bg-blue-600' },
              { key: 'facebook', name: 'Facebook', icon: <FaFacebook />, color: 'bg-blue-500' },
              { key: 'instagram', name: 'Instagram', icon: <FaInstagram />, color: 'bg-pink-500' },
              { key: 'twitter', name: 'Twitter', icon: <FaTwitter />, color: 'bg-blue-400' },
              { key: 'youtube', name: 'YouTube', icon: <FaYoutube />, color: 'bg-red-500' },
              { key: 'tiktok', name: 'TikTok', icon: <FaTiktok />, color: 'bg-black' }
            ].map(platform => (
              <div key={platform.key} className="flex items-center space-x-3">
                <div className={`w-8 h-8 ${platform.color} rounded flex items-center justify-center text-white text-sm`}>
                  {platform.icon}
                </div>
                <div className="flex-1">
                  <input
                    type="url"
                    value={data[platform.key] || ''}
                    onChange={(e) => setData({ ...data, [platform.key]: e.target.value })}
                    placeholder={`${platform.name} 網址`}
                    className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
                  />
                </div>
              </div>
            ))}
          </div>
        );
      
      case 'map':
        return (
          <div className="space-y-3">
            <input
              type="text"
              value={data.title || ''}
              onChange={(e) => setData({ ...data, title: e.target.value })}
              placeholder="地點名稱"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <textarea
              value={data.address || ''}
              onChange={(e) => setData({ ...data, address: e.target.value })}
              placeholder="完整地址"
              rows={2}
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            <input
              type="text"
              value={data.map_url || ''}
              onChange={(e) => setData({ ...data, map_url: e.target.value })}
              placeholder="Google Maps 網址 (可選)"
              className="w-full px-3 py-2 border border-amber-300 bg-gray-900 text-amber-100 placeholder-amber-300 rounded focus:ring-2 focus:ring-amber-500 focus:border-amber-500"
            />
            {data.address && (
              <div className="bg-gray-800 p-3 rounded border border-amber-300">
                <p className="text-sm text-amber-200 mb-2">地圖預覽:</p>
                <iframe
                  src={`https://www.google.com/maps/embed/v1/place?key=YOUR_API_KEY&q=${encodeURIComponent(data.address)}`}
                  width="100%"
                  height="200"
                  style={{ border: 0 }}
                  allowFullScreen=""
                  loading="lazy"
                  referrerPolicy="no-referrer-when-downgrade"
                  className="rounded"
                  title="地圖預覽"
                ></iframe>
                <p className="text-xs text-amber-300 mt-1">注意：需要設定 Google Maps API Key 才能正常顯示地圖</p>
              </div>
            )}
          </div>
        );
      
      default:
        return (
          <div className="text-gray-500 text-center py-4">
            此類型的編輯器尚未實現
          </div>
        );
    }
  };
  
  return (
    <div>
      {renderEditor()}
      <div className="flex justify-end space-x-2 mt-4">
        <button
          onClick={onCancel}
          className="px-3 py-1 text-amber-200 bg-gray-800 border border-amber-300 rounded hover:bg-gray-700 transition-colors"
        >
          取消
        </button>
        <button
          onClick={handleSave}
          className="px-3 py-1 text-gray-900 bg-amber-500 rounded hover:bg-amber-400 transition-colors"
        >
          保存
        </button>
      </div>
    </div>
  );
};

// 模板預覽組件
const TemplatePreview = ({ template, cardConfig }) => {
  const getTemplateClassName = () => {
    if (!template) return 'template-default';
    
    // 根據模板名稱映射到對應的 CSS 類名
    const templateClassMap = {
      '極簡高級風格': 'template-minimal-luxury',
      '未來科技感風格': 'template-futuristic-tech',
      '創意品牌風格': 'template-creative-brand',
      '專業商務風格': 'template-professional-business',
      '動態互動風格': 'template-dynamic-interactive'
    };
    
    return templateClassMap[template.name] || 'template-default';
  };

  const templateClass = getTemplateClassName();

  return (
    <div className={`nfc-card-container ${templateClass}`} style={{ minHeight: 'auto', padding: '1rem' }}>
      <div className="card-content" style={{ maxWidth: 'none', padding: '0' }}>
        {/* 內容區塊 */}
        <div className="content-blocks" style={{ padding: '0' }}>
          {cardConfig?.content_blocks?.length > 0 ? (
            cardConfig.content_blocks.map((block, index) => (
              <div key={index} className="content-block" style={{ 
                marginBottom: '1rem', 
                padding: '0.75rem',
                fontSize: '0.75rem'
              }}>
                <BlockPreview block={block} />
              </div>
            ))
          ) : (
            <div className="text-center text-gray-500 py-8">
              <PhotoIcon className="h-8 w-8 mx-auto mb-2 text-gray-300" />
              <p className="text-sm">尚未添加內容</p>
              <p className="text-xs mt-1">在左側添加內容區塊</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// 區塊預覽組件
const BlockPreview = ({ block }) => {
  if (!block) return null;
  const { content_data } = block;
  
  switch (block.content_type) {
    case 'text':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            {content_data?.title || '文字區塊'}
          </div>
          <div className="text-amber-100 text-xs">
            {content_data?.content || '內容文字'}
          </div>
        </div>
      );
    
    case 'link':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            {content_data?.title || '連結標題'}
          </div>
          <div className="text-amber-300 text-xs">
            {content_data?.url || 'https://example.com'}
          </div>
        </div>
      );
    
    case 'video':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            {content_data?.title || '影片標題'}
          </div>
          <div className="text-amber-100 text-xs">
            {content_data?.type === 'youtube' ? (
              (content_data?.url || content_data?.videoId) ? (
                <div className="flex items-center gap-1">
                  <span>📺</span>
                  <span>YouTube 影片</span>
                </div>
              ) : (
                '請輸入 YouTube 網址'
              )
            ) : (
              content_data?.file ? (
                <div className="flex items-center gap-1">
                  <span>🎬</span>
                  <span>{content_data.file}</span>
                </div>
              ) : (
                '請上傳影片文件'
              )
            )}
          </div>
        </div>
      );
    
    case 'image':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            {content_data?.title || '圖片標題'}
          </div>
          {content_data?.url ? (
            <div className="mb-2">
              <img 
                src={content_data.url} 
                alt={content_data.alt} 
                className="max-w-full h-16 object-cover rounded" 
                style={{ maxHeight: '64px' }}
              />
            </div>
          ) : (
            <div className="text-amber-100 text-xs mb-2">
              <span>🖼️ 請上傳圖片</span>
            </div>
          )}
          {content_data?.alt && (
            <div className="text-amber-300 text-xs italic">
              {content_data.alt}
            </div>
          )}
        </div>
      );
    
    case 'social':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            社群媒體
          </div>
          <div className="flex flex-wrap gap-1">
            {[
              { key: 'linkedin', name: 'LinkedIn', icon: <FaLinkedin /> },
              { key: 'facebook', name: 'Facebook', icon: <FaFacebook /> },
              { key: 'instagram', name: 'Instagram', icon: <FaInstagram /> },
              { key: 'twitter', name: 'Twitter', icon: <FaTwitter /> },
              { key: 'youtube', name: 'YouTube', icon: <FaYoutube /> },
              { key: 'tiktok', name: 'TikTok', icon: <FaTiktok /> }
            ].filter(platform => content_data?.[platform.key]).map(platform => (
              <span key={platform.key} className="px-2 py-1 bg-amber-600 text-amber-100 text-xs rounded flex items-center gap-1">
                <span>{platform.icon}</span>
                <span>{platform.name}</span>
              </span>
            ))}
            {!Object.values(content_data || {}).some(url => url) && (
              <span className="text-amber-100 text-xs">請添加社群媒體連結</span>
            )}
          </div>
        </div>
      );
    
    case 'map':
      return (
        <div>
          <div className="block-title text-amber-200" style={{ fontSize: '0.875rem', marginBottom: '0.5rem' }}>
            {content_data?.title || '地點名稱'}
          </div>
          <div className="text-amber-100 text-xs mb-1">
            📍 {content_data?.address || '請輸入地址'}
          </div>
          {content_data?.address && (
            <div className="bg-gray-800 rounded text-xs p-2 text-amber-200">
              🗺️ Google Maps 地圖
            </div>
          )}
        </div>
      );
    
    default:
      return (
        <div className="text-amber-100 text-xs">
          {getBlockTypeLabel(block.content_type)} 內容
        </div>
      );
  }
};

const getBlockTypeLabel = (type) => {
  const labels = {
    text: '文字',
    link: '連結',
    video: '影片',
    image: '圖片',
    social: '社群',
    map: '地圖'
  };
  return labels[type] || type;
};

export default NFCCardEditor;