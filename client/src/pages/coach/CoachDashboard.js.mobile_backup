import React, { useEffect, useMemo, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from '../../config/axios';
import Avatar from '../../components/Avatar';
import LoadingSpinner from '../../components/LoadingSpinner';
import DressCodeExamples from '../../components/DressCodeExamples';
import {
  BuildingOfficeIcon,
  BriefcaseIcon,
  PhoneIcon,
  EyeIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CheckCircleIcon,
  XCircleIcon,
  XMarkIcon,
  CalendarIcon,
  ClipboardDocumentListIcon,
  EnvelopeIcon,
  ChartBarIcon,
  ClockIcon,
  CreditCardIcon
} from '@heroicons/react/24/outline';
import { toast } from 'react-hot-toast';
import { useAuth } from '../../contexts/AuthContext';

const CoachDashboard = () => {
  // 分頁狀態（已移除搜尋）
  const [page, setPage] = useState(1);
  const [limit] = useState(12);
  // const navigate = useNavigate();

  const { user, isCoach: isCoachCtx } = useAuth();
  const iAmCoach = !!(isCoachCtx && isCoachCtx());

  // 資料狀態（教練視圖）
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [coachees, setCoachees] = useState([]);
  const [pagination, setPagination] = useState({ currentPage: 1, totalPages: 1, totalMembers: 0, limit });

  // 任務統計
  const [taskStats, setTaskStats] = useState({ total: 0, pending: 0, inProgress: 0, completed: 0, overdue: 0 });
  const [statsLoading, setStatsLoading] = useState(false);
  // 進度概況
  const [progressById, setProgressById] = useState({});
  // 已移除未使用的 progressLoading 以清理警告
  const [selectedMember, setSelectedMember] = useState(null);
  const [sortKey, setSortKey] = useState(() => localStorage.getItem('coachSortKey') || 'default'); // default | overdue_desc | meetings_desc
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const canPrev = useMemo(() => page > 1, [page]);
  const canNext = useMemo(() => page < (pagination?.totalPages || 1), [page, pagination]);

  // 當選擇不同學員時重置卡片索引
  useEffect(() => {
    setCurrentCardIndex(0);
  }, [selectedMember?.id]);

  // Modal 內操作狀態
  const [actionLoading, setActionLoading] = useState(false);
  
  // 專案計劃狀態
  const [projectPlans, setProjectPlans] = useState({});
  const [projectPlanLoading, setProjectPlanLoading] = useState({});

  // 學員視圖（非教練）
  const [myTasks, setMyTasks] = useState([]);
  const [myTasksLoading, setMyTasksLoading] = useState(false);
  const [myCoach, setMyCoach] = useState(null);
  const [myTaskUpdating, setMyTaskUpdating] = useState({}); // { [taskId]: true }
  const [myCoachLogs, setMyCoachLogs] = useState([]);
  
  // 卡片勾選狀態管理 - 添加持久化
  const [checklistStates, setChecklistStates] = useState(() => {
    const saved = localStorage.getItem('coachDashboardChecklistStates');
    return saved ? JSON.parse(saved) : {};
  });
  
  // 核心會員狀態
  const [coreMembers, setCoreMembers] = useState([]);
  const [coreMembersLoading, setCoreMembersLoading] = useState(false);
  
  // 幹部會員狀態
  const [staffMembers, setStaffMembers] = useState([]);
  const [staffMembersLoading, setStaffMembersLoading] = useState(false);
  
  // 更新勾選框狀態 - 添加持久化
  const updateCheckboxState = (memberId, itemId, detailId, newState) => {
    const key = `${memberId}_${itemId}_${detailId}`;
    const newStates = {
      ...checklistStates,
      [key]: newState
    };
    setChecklistStates(newStates);
    localStorage.setItem('coachDashboardChecklistStates', JSON.stringify(newStates));
  };
  
  // 獲取勾選框狀態
  const getCheckboxState = (memberId, itemId, detailId, defaultState = false) => {
    const key = `${memberId}_${itemId}_${detailId}`;
    return checklistStates[key] !== undefined ? checklistStates[key] : defaultState;
  };

  // 處理勾選項目 - 添加持久化
  const handleChecklistToggle = (cardId, itemId) => {
    const newStates = {
      ...checklistStates,
      [cardId]: {
        ...checklistStates[cardId],
        [itemId]: !checklistStates[cardId]?.[itemId]
      }
    };
    setChecklistStates(newStates);
    localStorage.setItem('coachDashboardChecklistStates', JSON.stringify(newStates));
  };

  // 複製郵件模板
  const copyEmailTemplate = (template, memberName = '學員姓名', coachName = user?.name || '教練姓名', coachIndustry = user?.industry || '教練行業') => {
    const emailContent = template
      .replace(/OO/g, memberName)
      .replace(/{memberName}/g, memberName)
      .replace(/{coachName}/g, coachName)
      .replace(/{coachIndustry}/g, coachIndustry);
    
    navigator.clipboard.writeText(emailContent).then(() => {
      toast.success('郵件內容已複製到剪貼板');
    }).catch(() => {
      toast.error('複製失敗，請手動複製');
    });
  };

  // 發送郵件 - 使用 GBC 系統
  const sendEmail = async (template, memberEmail, memberName = '學員姓名', coachName = user?.name || '教練姓名', coachIndustry = user?.industry || '教練行業') => {
    // 調試：檢查 selectedMember 的完整內容
    console.log('調試 selectedMember:', selectedMember);
    console.log('調試 memberEmail:', memberEmail);
    console.log('調試 selectedMember?.email:', selectedMember?.email);
    
    // 驗證必要參數
    if (!memberEmail) {
      toast.error('無法發送郵件：學員信箱地址不存在');
      return;
    }
    
    if (!template) {
      toast.error('無法發送郵件：郵件模板內容為空');
      return;
    }
    
    const emailContent = template
      .replace(/{memberName}/g, memberName)
      .replace(/{coachName}/g, coachName)
      .replace(/{coachIndustry}/g, coachIndustry);
    
    try {
      // 使用 GBC 系統發送郵件
      const response = await axios.post('/api/emails/send', {
        to: memberEmail,
        subject: 'GBC新會員歡迎信',
        content: emailContent,
        type: 'welcome'
      });
      
      toast.success('郵件已通過 GBC 系統發送');
    } catch (error) {
      console.error('發送郵件失敗:', error);
      
      // 顯示具體的錯誤信息
      const errorMessage = error.response?.data?.message || '郵件發送失敗';
      toast.error(`發送失敗：${errorMessage}`);
      
      // 如果 GBC 系統發送失敗，回退到 mailto
      const subject = 'GBC新會員歡迎信';
      const mailtoLink = `mailto:${memberEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailContent)}`;
      window.open(mailtoLink);
      toast.warning('已打開郵件客戶端作為備用方案');
    }
  };

  const getMembershipLevelBadge = (level) => {
    const badges = {
      1: { text: '核心', class: 'level-1' },
      2: { text: '幹部', class: 'level-2' },
      3: { text: '會員', class: 'level-3' }
    };
    const badge = badges[level] || { text: '未設定', class: 'bg-gray-500' };
    return (
      <span className={`badge ${badge.class} text-xs px-2 py-1 rounded-full font-medium`}>
        {badge.text}
      </span>
    );
  };

  const fetchCoachees = async () => {
    try {
      setLoading(true);
      setError('');
      const params = { page, limit };
      // 套用排序參數（搜尋與舊篩選已移除）
      if (sortKey && sortKey !== 'default') params.sort = sortKey;

      const resp = await axios.get('/api/users/my-coachees', { params });
      const data = resp.data || {};
      setCoachees(Array.isArray(data.coachees) ? data.coachees : []);
      setPagination(data.pagination || { currentPage: page, totalPages: 1, totalMembers: 0, limit });
    } catch (e) {
      console.error('載入學員列表失敗:', e);
      setError(e.response?.data?.message || '載入學員列表失敗');
      setCoachees([]);
      setPagination({ currentPage: 1, totalPages: 1, totalMembers: 0, limit });
    } finally {
      setLoading(false);
    }
  };

  const fetchTaskStats = async () => {
    try {
      setStatsLoading(true);
      const resp = await axios.get('/api/users/my-coachees/task-stats');
      const s = resp.data || {};
      setTaskStats({
        total: Number(s.total || 0),
        pending: Number(s.pending || 0),
        inProgress: Number(s.inProgress || 0),
        completed: Number(s.completed || 0),
        overdue: Number(s.overdue || 0)
      });
    } catch (e) {
      console.error('載入任務統計失敗:', e);
    } finally {
      setStatsLoading(false);
    }
  };

  const fetchProgress = async () => {
    try {
      const resp = await axios.get('/api/users/my-coachees/progress');
      const list = resp.data?.progress || [];
      const map = {};
      list.forEach(item => {
        if (item && item.userId != null) map[item.userId] = item;
      });
      setProgressById(map);
    } catch (e) {
      console.error('載入進度概況失敗:', e);
    } finally {
      // no-op
    }
  };

  // 非教練視圖：載入自己的任務與教練資訊
  const fetchMyView = async () => {
    if (!user?.id) return;
    setMyTasksLoading(true);
    try {
      // 取得自己的任務
      const tResp = await axios.get(`/api/users/member/${user.id}/onboarding-tasks`);
      setMyTasks(Array.isArray(tResp.data?.tasks) ? tResp.data.tasks : []);

      // 取得教練公開資訊（若有教練）
      if (user.coachUserId) {
        try {
          const cResp = await axios.get(`/api/users/${user.coachUserId}/public`);
          setMyCoach(cResp.data?.user || null);
        } catch (err) {
          console.warn('取得教練公開資訊失敗或不存在');
          setMyCoach({ id: user.coachUserId });
        }
      } else {
        setMyCoach(null);
      }

      // 取得教練紀錄（唯讀）
      try {
        const lResp = await axios.get(`/api/users/member/${user.id}/coach-logs`);
        setMyCoachLogs(Array.isArray(lResp.data?.logs) ? lResp.data.logs : []);
      } catch (err) {
        console.warn('取得教練紀錄失敗');
        setMyCoachLogs([]);
      }
    } catch (e) {
      console.error('載入我的任務失敗:', e);
      setMyTasks([]);
      setMyCoachLogs([]);
    } finally {
      setMyTasksLoading(false);
    }
  };

  const updateTaskStatus = async (taskId, status) => {
    if (!taskId) return;
    setMyTaskUpdating(prev => ({ ...prev, [taskId]: true }));
    try {
      const p = axios.put(`/api/users/onboarding-tasks/${taskId}`, { status });
      await toast.promise(p, {
        loading: '更新任務中…',
        success: status === 'completed' ? '任務已完成' : '已更新任務狀態',
        error: (err) => err?.response?.data?.message || '更新任務失敗'
      }, {
        id: `task-${taskId}`,
        duration: 4000,
        style: { background: '#1f2937', color: '#fde68a', border: '1px solid #b45309' }
      });
      await fetchMyView();
    } catch (e) {
      // 錯誤已由 toast 顯示
    } finally {
      setMyTaskUpdating(prev => ({ ...prev, [taskId]: false }));
    }
  };

  // 獲取核心會員名單
  const fetchCoreMembers = async () => {
    try {
      setCoreMembersLoading(true);
      const resp = await axios.get('/api/users/core-members');
      setCoreMembers(resp.data?.coreMembers || []);
    } catch (e) {
      console.error('載入核心會員名單失敗:', e);
      setCoreMembers([]);
    } finally {
      setCoreMembersLoading(false);
    }
  };

  // 獲取幹部會員名單
  const fetchStaffMembers = async () => {
    try {
      setStaffMembersLoading(true);
      const resp = await axios.get('/api/users/staff-members');
      setStaffMembers(resp.data?.staffMembers || []);
    } catch (e) {
      console.error('載入幹部會員名單失敗:', e);
      setStaffMembers([]);
    } finally {
      setStaffMembersLoading(false);
    }
  };

  useEffect(() => {
    if (iAmCoach) return;
    fetchMyView();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [iAmCoach, user?.id, user?.coachUserId]);

  useEffect(() => {
    if (!iAmCoach) return;
    fetchCoachees();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page, sortKey, iAmCoach]);

  useEffect(() => {
    if (!iAmCoach) return;
    fetchTaskStats();
    fetchProgress();
    fetchCoreMembers();
    fetchStaffMembers();
  }, [iAmCoach]);

  // 持久化：排序（舊的兩個篩選已移除）
  useEffect(() => {
    try { localStorage.setItem('coachSortKey', sortKey || 'default'); } catch {}
  }, [sortKey]);

  const visibleCoachees = useMemo(() => {
    let list = Array.isArray(coachees) ? [...coachees] : [];

    // 排序
    if (sortKey === 'overdue_desc') {
      list.sort((a, b) => {
        const ao = Number(a?.taskCounts?.overdue ?? 0);
        const bo = Number(b?.taskCounts?.overdue ?? 0);
        return bo - ao;
      });
    } else if (sortKey === 'meetings_desc') {
      list.sort((a, b) => {
        const am = Number(progressById[a.id]?.meetingsCount ?? 0);
        const bm = Number(progressById[b.id]?.meetingsCount ?? 0);
        return bm - am;
      });
    }

    return list;
  }, [coachees, progressById, sortKey]);

  // Modal 內動作
  const closeModal = () => {
    setSelectedMember(null);
  };

  // 獲取專案計劃
  const fetchProjectPlan = async (memberId) => {
    if (projectPlans[memberId] || projectPlanLoading[memberId]) return;
    
    setProjectPlanLoading(prev => ({ ...prev, [memberId]: true }));
    try {
      const response = await axios.get(`/api/users/member/${memberId}/project-plan`);
      setProjectPlans(prev => ({ ...prev, [memberId]: response.data }));
    } catch (error) {
      console.error('獲取專案計劃失敗:', error);
      setProjectPlans(prev => ({ ...prev, [memberId]: null }));
    } finally {
      setProjectPlanLoading(prev => ({ ...prev, [memberId]: false }));
    }
  };



  // 更新會員狀態
  const updateMemberStatus = async (memberId, newStatus) => {
    setActionLoading(true);
    try {
      await axios.put(`/api/admin/users/${memberId}/status`, { status: newStatus });
      toast.success(`會員狀態已更新為${newStatus === 'active' ? '活躍' : '非活躍'}`);
      // 更新本地狀態
      setCoachees(prev => prev.map(member => 
        member.id === memberId ? { ...member, status: newStatus } : member
      ));
      if (selectedMember && selectedMember.id === memberId) {
        setSelectedMember(prev => ({ ...prev, status: newStatus }));
      }
    } catch (error) {
      console.error('更新會員狀態失敗:', error);
      toast.error(error.response?.data?.message || '更新會員狀態失敗');
    } finally {
      setActionLoading(false);
    }
  };

  const progressSummary = (memberId) => {
    const p = progressById[memberId] || {};
    const prog = p?.progress || {};
    const percent = Math.round(Number(prog?.overallPercent ?? 0));
    const profileScore = Number(prog?.profileScore ?? 0);
    const systemScore = Number(prog?.systemScore ?? 0);
    const bonusMbti = Number(prog?.bonusMbti ?? 0);
    return { p, percent, profileScore, systemScore, bonusMbti };
  };

  // 非教練視圖：僅顯示教練資訊
  if (!iAmCoach) {
    return (
      <div className="space-y-6">
        <div className="bg-primary-800 border border-gold-600 rounded-lg p-6 shadow-elegant">
          <h1 className="text-2xl font-semibold text-gold-100">教練專區</h1>
          <p className="mt-2 text-gold-300">此頁面僅供教練使用。</p>
        </div>

        <div className="bg-primary-800 border border-gold-600 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-medium text-gold-100">教練資訊</h2>
          </div>

          {/* 教練資訊 */}
          <div className="mb-4">
            <div className="text-sm text-gold-300 mb-2">我的教練：</div>
            {user?.coachUserId ? (
              myCoach ? (
                <div className="flex items-center gap-3">
                  <Avatar src={myCoach.profilePictureUrl} alt={myCoach.name} size="small" />
                  <div>
                    <div className="text-sm text-gold-100 font-semibold">{myCoach.name || `ID: ${myCoach.id}`}</div>
                    {myCoach.email && (
                      <div className="text-xs text-gold-300 flex items-center gap-1">
                        <EnvelopeIcon className="h-3.5 w-3.5" />
                        <a href={`mailto:${myCoach.email}`} className="hover:underline text-gold-200">{myCoach.email}</a>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <div className="text-sm text-gold-300">載入中…</div>
              )
            ) : (
              <span className="text-xs px-2 py-1 rounded-full bg-gray-700 text-gray-200">指派教練中</span>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="bg-primary-800 border border-gold-600 rounded-lg p-6 shadow-elegant">
        <h1 className="text-2xl font-semibold text-gold-100">教練儀表板</h1>
        <p className="mt-2 text-gold-300">歡迎來到教練專區。您可以在此查看並管理指派給您的學員。</p>
      </div>

      {/* 任務統計 */}
      <div className="bg-primary-800 border border-gold-600 rounded-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-medium text-gold-100">待辦任務統計</h2>
          {statsLoading && <span className="text-sm text-gold-300">載入中...</span>}
        </div>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
          <div className="card p-3 text-center">
            <div className="text-xs text-gold-300">總數</div>
            <div className="text-2xl font-semibold text-gold-100">{taskStats.total}</div>
          </div>
          <div className="card p-3 text-center">
            <div className="text-xs text-gold-300">待辦</div>
            <div className="text-2xl font-semibold text-yellow-200">{taskStats.pending}</div>
          </div>
          <div className="card p-3 text-center">
            <div className="text-xs text-gold-300">進行中</div>
            <div className="text-2xl font-semibold text-blue-200">{taskStats.inProgress}</div>
          </div>
          <div className="card p-3 text-center">
            <div className="text-xs text-gold-300">已完成</div>
            <div className="text-2xl font-semibold text-green-200">{taskStats.completed}</div>
          </div>
          <div className="card p-3 text-center">
            <div className="text-xs text-gold-300">逾期</div>
            <div className="text-2xl font-semibold text-red-200">{taskStats.overdue}</div>
          </div>
        </div>
      </div>

      {/* 搜尋列 */}
      <div className="bg-primary-800 border border-gold-600 rounded-lg p-4">
        <div className="flex flex-col md:flex-row gap-3 items-center justify-between">
          <div className="flex items-center gap-3">
            <label className="text-sm text-gold-200">排序</label>
            <select className="input py-1" value={sortKey} onChange={(e) => { setSortKey(e.target.value); setPage(1); }}>
              <option value="default">預設</option>
              <option value="overdue_desc">逾期任務數（多→少）</option>
              <option value="meetings_desc">會議次數（多→少）</option>
            </select>
            {sortKey !== 'default' && (
              <button
                type="button"
                onClick={() => { setSortKey('default'); setPage(1); fetchCoachees(); }}
                className="btn-secondary py-1 px-2"
              >重置</button>
            )}
          </div>
        </div>
        {sortKey !== 'default' && (
          <div className="mt-2 text-xs text-gold-300">已套用排序（跨頁生效）。</div>
        )}
      </div>

      {/* 學員列表 */}
      <div className="bg-primary-800 border border-gold-600 rounded-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-medium text-gold-100">我的學員</h2>
          <div className="text-sm text-gold-300">
            共 {pagination?.totalMembers || 0} 位
          </div>
        </div>

        {loading ? (
          <div className="flex items-center justify-center h-48">
            <LoadingSpinner size="large" />
          </div>
        ) : error ? (
          <div className="text-red-300">{error}</div>
        ) : coachees.length === 0 ? (
          <div className="text-center py-12">
            <EyeIcon className="mx-auto h-12 w-12 text-gold-400" />
            <h3 className="mt-2 text-sm font-medium text-gold-100">尚未有指派的學員</h3>
            <p className="mt-1 text-sm text-gold-300">當管理員為會員指派您為教練後，名單將顯示於此。</p>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {visibleCoachees.map((member) => {
                const { p, percent } = progressSummary(member.id);
                const missing = {
                  interview: !(p?.hasInterview),
                  mbti: !(p?.hasMbtiType),
                  nfc: !(p?.hasNfcCard),
                  foundation: !(p?.foundationViewed)
                };
                return (
                  <div key={member.id} className="card hover:shadow-lg transition-shadow duration-200 cursor-pointer relative" onClick={() => {
                  setSelectedMember(member);
                  fetchProjectPlan(member.id);
                }}>
                    <div className="p-4">
                      {/* 簡潔版卡片：大頭貼、名字、行業別、進度條 */}
                      <div className="flex items-center mb-3">
                        <Avatar 
                          src={member.profilePictureUrl} 
                          alt={member.name}
                          size="medium"
                        />
                        <div className="ml-3 flex-1">
                          <h3 className="text-sm font-medium text-gold-100 truncate">
                            {member.name}
                          </h3>
                          <div className="text-xs text-gold-300 truncate">
                            {member.company}
                          </div>
                        </div>
                      </div>

                      {/* 進度條 */}
                      {(() => {
                        const percentShow = percent;
                        return (
                          <div>
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-xs text-gold-300">進度</span>
                              <span className="text-xs text-gold-100 font-semibold">{percentShow}%</span>
                            </div>
                            <div className="w-full h-2 bg-primary-700 rounded">
                              <div
                                className={`h-2 rounded ${percentShow >= 80 ? 'bg-green-500' : percentShow >= 50 ? 'bg-yellow-500' : 'bg-red-500'}`}
                                style={{ width: `${percentShow}%` }}
                              />
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                );
              })}
            </div>

            {/* Pagination */}
            <div className="mt-6 flex items-center justify-between">
              <div className="text-sm text-gold-300">
                第 {pagination?.currentPage || page} / {pagination?.totalPages || 1} 頁
              </div>
              <div className="space-x-2">
                <button
                  type="button"
                  disabled={!canPrev}
                  onClick={() => canPrev && setPage(page - 1)}
                  className={`btn-secondary inline-flex items-center ${!canPrev ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  <ChevronLeftIcon className="h-4 w-4 mr-1" /> 上一頁
                </button>
                <button
                  type="button"
                  disabled={!canNext}
                  onClick={() => canNext && setPage(page + 1)}
                  className={`btn-secondary inline-flex items-center ${!canNext ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  下一頁 <ChevronRightIcon className="h-4 w-4 ml-1" />
                </button>
              </div>
            </div>
          </>
        )}
      </div>

      {/* 進度總覽彈窗 & 快捷 CTA */}
      {selectedMember && (
        <div className="fixed inset-0 z-40">
          <div className="absolute inset-0 bg-black/60" onClick={closeModal} />
          <div className="absolute inset-x-4 md:inset-x-0 md:left-1/2 md:-translate-x-1/2 top-10 md:top-20 z-50 bg-primary-800 border border-gold-600 rounded-lg shadow-elegant w-auto md:w-[720px]">
            <div className="flex items-center justify-between p-4 border-b border-gold-700">
              <div className="flex items-center">
                <Avatar src={selectedMember.profilePictureUrl} alt={selectedMember.name} size="medium" />
                <div className="ml-3">
                  <div className="text-gold-100 font-semibold">{selectedMember.name}</div>
                  <div className="text-xs text-gold-300">{selectedMember.company} ・ {selectedMember.title}</div>
                </div>
              </div>
              <button className="icon-button" onClick={closeModal}>
                <XMarkIcon className="h-5 w-5" />
              </button>
            </div>

            <div className="p-4 md:p-6">
              {/* 進度概覽 */}
              {(() => {
                const { p, percent, profileScore, systemScore, bonusMbti } = progressSummary(selectedMember.id);
                return (
                  <div>
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gold-300">進度</div>
                      <div className="text-sm text-gold-100 font-semibold">{percent}%</div>
                    </div>
                    <div className="w-full h-2 bg-primary-700 rounded mt-1">
                      <div className={`h-2 rounded ${percent >= 80 ? 'bg-green-500' : percent >= 50 ? 'bg-yellow-500' : 'bg-red-500'}`} style={{ width: `${percent}%` }} />
                    </div>
                    <div className="mt-1 text-[11px] text-gold-400">基礎 {profileScore}/60 ・ 系統 {systemScore}/40{bonusMbti > 0 ? ` ・ MBTI +${bonusMbti}` : ''}</div>

                    {/* 狀態徽章 */}
                    <div className="mt-3 flex flex-wrap gap-1">
                      <span className={`${p?.hasInterview ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'} inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium`}>
                        {p?.hasInterview ? <CheckCircleIcon className="h-3 w-3 mr-1"/> : <XCircleIcon className="h-3 w-3 mr-1"/>}
                        面談
                      </span>
                      <span className={`${p?.hasMbtiType ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'} inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium`}>
                        {p?.hasMbtiType ? <CheckCircleIcon className="h-3 w-3 mr-1"/> : <XCircleIcon className="h-3 w-3 mr-1"/>}
                        MBTI
                      </span>
                      <span className={`${p?.hasNfcCard ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'} inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium`}>
                        {p?.hasNfcCard ? <CheckCircleIcon className="h-3 w-3 mr-1"/> : <XCircleIcon className="h-3 w-3 mr-1"/>}
                        NFC
                      </span>
                      <span className={`${p?.foundationViewed ? 'bg-green-700 text-green-100' : 'bg-gray-700 text-gray-200'} inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium`}>
                        {p?.foundationViewed ? <CheckCircleIcon className="h-3 w-3 mr-1"/> : <XCircleIcon className="h-3 w-3 mr-1"/>}
                        地基
                      </span>
                    </div>
                  </div>
                );
              })()}

              {/* 附件項目卡片 */}
              <div className="mt-6">
                <div className="flex items-center gap-2 mb-3">
                  <ClipboardDocumentListIcon className="h-5 w-5 text-gold-300" />
                  <div className="text-lg font-semibold text-gold-100">教練任務</div>
                </div>
                
                {(() => {
                   const { p } = progressSummary(selectedMember.id);
                   const attachmentItems = [
                     {
                       id: 'core_member_approval',
                       title: '核心會員完成準予加入GBC',
                       subtitle: '對象：新會員、教練',
                       description: '教練需執行以下項目，完成後可勾選確認',
                       details: [
                         '建立群組',
                         '新會員提供基本資料及一張專業形象照片（基本資料系統自動抓學員的個人資料和大頭貼，大頭貼是能夠讓教練下載的）',
                         '發送給學員信件'
                       ],
                       completed: p?.hasInterview || false,
                       category: '基礎建立',
                       priority: 'high',
                       checklistItems: [
                         { id: 'create_group', text: '建立群組', completed: false },
                         { id: 'member_data', text: '新會員提供基本資料及一張專業形象照片', completed: false },
                         { id: 'send_email', text: '發送給學員信件', completed: false }
                       ],
                       emailTemplate: `{memberName}您好:

我是GBC教練{coachName}，代表性行業是{coachIndustry}，是未來4週陪伴您進入系統及融入分會的專屬教練，群組是本屆會長、副會長。

未來如有任何問題，歡迎在群組請與我們提出及聯絡。

最後，GBC所有教練歡迎您的加入，一同成長！`
                     },
                     {
                       id: 'pre_oath_preparation',
                       title: '新會員宣誓前3-7天準備',
                       subtitle: '對象：新會員、教練',
                       description: '協助新會員準備自我介紹範本及說明共同目標',
                       details: [
                         {
                           id: 'self_intro_template',
                           text: '協助新會員準備50秒自我介紹範本',
                           subtext: `大家好，我是${selectedMember?.industry || selectedMember?.company || 'OOO'}代表，${selectedMember?.name || 'XXX'}\n主要產品/服務內容\n成功見證\n主要代表性客戶\n獨特銷售或專業項\n請幫我引薦對象`,
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'explain_goals_foundation',
                           text: '再次說明共同目標、GBC地基及成功經驗',
                           subtext: `GBC地基狀態：${selectedMember?.profile?.foundationViewed ? '✅ 學員已閱讀商會地基' : '❌ 學員尚未閱讀商會地基'}`,
                           completed: false,
                           type: 'checkbox'
                         }
                       ],
                       completed: false,
                       category: '準備階段',
                       priority: 'high'
                     },
                     {
                       id: 'day_before_oath',
                       title: '宣誓前一天',
                       subtitle: '對象：新會員、教練',
                       description: '前一天提醒新會員內容',
                       details: [
                         {
                           id: 'attendance_time',
                           text: '出席時間 14:00',
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'self_intro_50sec',
                           text: '50秒自我介紹',
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'dress_code',
                           text: '服裝儀容，範例：(插上附件)',
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'business_cards',
                           text: '準備30張名片',
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'four_week_plan',
                           text: '4週導生計畫',
                           completed: false,
                           type: 'checkbox'
                         },
                         {
                           id: 'send_email',
                           text: '發送給學員信件',
                           completed: false,
                           type: 'checkbox'
                         }
                       ],
                       emailTemplate: `${selectedMember?.name || 'OO'}您好:

提醒您
今天需請您練習50秒自我介紹!
掌握好上台狀況很重要，若怕緊張可以帶上手稿上台，請不要帶手機看稿！

參與例會時注意事項:
1.例會及培訓時請穿著正式服裝、配戴Pin章及名牌(襯衫、西裝、洋裝、皮鞋等)
2.請帶名片(30張以上)
3.明日到場時間14:00到達，我們將協助您教學以及認識夥伴。`,
                       completed: false,
                       category: '最終準備',
                       priority: 'high'
                     },
                     {
                       id: 'ceremony_day',
                       title: '第一天14:00宣前會',
                       subtitle: '對象：新會員、教練',
                       description: '教練需執行以下項目，完成後可勾選確認',
                       checklistItems: [
                         { id: 'intro_guide', text: '關心50秒自我介紹引薦單介紹內容' },
                         { id: 'environment_intro', text: '介紹環境' },
                         { id: 'core_staff_intro', text: '介紹核心幹部及職位內容' }
                       ],
                       completed: false,
                       category: '宣誓儀式',
                       priority: 'high'
                     },
                     {
                       id: 'networking_time',
                       title: '交流時間',
                       subtitle: '引導新會員認識會員及來賓',
                       description: '引導新會員認識會員及來賓(尤其要介紹與新會員同產業類別或可以合作的會員)',
                       checklistItems: [
                         { id: 'networking_guide', text: '引導新會員認識會員及來賓(尤其要介紹與新會員同產業類別或可以合作的會員)' }
                       ],
                       completed: false,
                       category: '社交建立',
                       priority: 'medium'
                     },
                     {
                       id: 'meeting_guidelines',
                       title: '例會中注意事項',
                       subtitle: '提醒手機關機或靜音、議程中如有需要說明，也請簡單說明即可，讓新會員專心參與議程',
                       description: '確保新會員了解例會禮儀和參與規範',
                       checklistItems: [
                         { id: 'phone_silent', text: '提醒手機關機或靜音，請全程專注投入議程，盡量不使用手機' },
                         { id: 'simple_explanation', text: '議程中如有需要說明，也請簡單說明即可，讓新會員專心參與議程' }
                       ],
                       completed: p?.understoodGuidelines || false,
                       category: '會議禮儀',
                       priority: 'medium'
                     },
                     {
                       id: 'post_meeting',
                       title: '會後',
                       subtitle: '對象：新會員、教練',
                       description: '執行：1.加入各大LINE群 2.系統教學',
                       checklistItems: [
                         '加入各大LINE群LINE群：新會員專案群、GBC聊天群、地基活動公告欄（請勿回覆）、分組第__組、軟性活動接龍群',
                         '系統教學：一對一、引薦單、引薦金額意義及操作'
                       ],
                       completed: false,
                       category: '系統整合',
                       priority: 'high'
                     },
                     {
                       id: 'one_week_followup',
                       title: '一週內需完成',
                       subtitle: '對象：教練',
                       description: '執行：1.兩天內確認系統是否能登入 2.教學系統個人深度交流表填寫 3.幫你的新會員曝光介紹及見證導生的產品或服務 4.多先參訪夥伴或體驗產品',
                       checklistItems: [
                         '兩天內確認系統是否能登入',
                         {
                           id: 'interview_form_check',
                           text: '教學系統個人深度交流表填寫',
                           subtext: `面談表狀態：${p?.hasInterview ? '✅ 學員已完成面談表填寫' : '❌ 學員尚未填寫面談表'}`,
                           completed: p?.hasInterview || false,
                           type: 'auto_detect',
                           progressBar: {
                             show: true,
                             value: p?.hasInterview ? 100 : 0,
                             label: p?.hasInterview ? '已完成' : '未填寫'
                           }
                         },
                         '幫你的新會員曝光介紹及見證導生的產品或服務，重點在讓新會員覺得有被重視',
                         '多先參訪夥伴或體驗產品'
                       ],
                       completed: p?.weekOneComplete || false,
                       category: '跟進確認',
                       priority: 'high'
                     },
                     {
                       id: 'second_week',
                       title: '第二週',
                       subtitle: '對象：新會員、教練',
                       description: '執行：1.引導新會員為何帶來賓 2.引導新會員邀請代理人參觀例會議程 3.深度交流表完成 4.優先與核心一對一',
                       checklistItems: [
                         {
                           id: 'guide_guest_purpose',
                           text: '引導新會員為何帶來賓'
                         },
                         {
                           id: 'invite_agent_meeting',
                           text: '引導新會員邀請代理人參觀例會議程'
                         },
                         {
                           id: 'deep_communication_form',
                           text: '深度交流表完成',
                           subtext: p?.hasInterview ? '✅ 學員已完成面談表填寫' : '❌ 學員尚未填寫面談表',
                           completed: p?.hasInterview || false,
                           type: 'auto_detect',
                           progressBar: {
                             value: p?.hasInterview ? 100 : 0,
                             label: p?.hasInterview ? '已完成' : '未填寫',
                             color: p?.hasInterview ? 'green' : 'red'
                           }
                         },
                         {
                           id: 'core_member_one_on_one',
                           text: '優先與核心一對一',
                           subtext: `系統偵測到 ${coreMembers.length} 位核心權限會員`,
                           completed: false,
                           type: 'core_members_list',
                           coreMembers: coreMembers,
                           loading: coreMembersLoading
                         }
                       ],
                       completed: p?.weekTwoComplete || false,
                       category: '深度整合',
                       priority: 'medium'
                     },
                     {
                       id: 'third_week',
                       title: '第三週',
                       subtitle: '對象：新會員、教練',
                       description: '執行：1.確認新會員系統使用狀況及進度 2.與幹部一對一狀況交流及回報進度',
                       checklistItems: [
                         { id: 'system_usage_check', text: '確認新會員系統使用狀況及進度' },
                         { 
                           id: 'staff_one_on_one', 
                           text: '與幹部一對一狀況交流及回報進度', 
                           subtext: `系統偵測到 ${staffMembers.length} 位干部權限會員`,
                           type: 'staff_members_list',
                           staffMembers: staffMembers,
                           loading: staffMembersLoading
                         }
                       ],
                       completed: p?.weekThreeComplete || false,
                       category: '進度追蹤',
                       priority: 'medium'
                     },
                     {
                       id: 'fourth_week',
                       title: '第四週',
                       subtitle: '對象：新會員、教練',
                       description: '執行：1.確認新會員使用系統狀況及進度 2.確認與核心及幹部一對一進度狀況 3.優化自我介紹及介紹主題簡報(50秒、20分鐘)',
                       checklistItems: [
                         { id: 'system_status_check', text: '確認新會員使用系統狀況及進度' },
                         { id: 'core_staff_one_on_one', text: '確認與核心及幹部一對一進度狀況' },
                         { id: 'presentation_optimization', text: '優化自我介紹及介紹主題簡報(50秒、20分鐘)' }
                       ],
                       completed: p?.weekFourComplete || false,
                       category: '技能提升',
                       priority: 'high'
                     },
                     {
                       id: 'graduation_standards',
                       title: '結業標準',
                       subtitle: '對象：新會員',
                       description: '執行：1.核心幹部一對一 2.完成系統教學 3.完成基本引薦行為 4.公告群組歡迎與其一對一',
                       checklistItems: [
                         { id: 'core_staff_one_on_one_final', text: '核心幹部一對一' },
                         { id: 'system_training_complete', text: '完成系統教學' },
                         { id: 'basic_referral_behavior', text: '完成基本引薦行為' },
                         { id: 'group_announcement_welcome', text: '公告群組歡迎與其一對一' }
                       ],
                       completed: p?.graduationComplete || false,
                       category: '結業認證',
                       priority: 'high'
                     }
                   ];
                   
                   const currentCard = attachmentItems[currentCardIndex] || attachmentItems[0];
                   
                   const nextCard = () => {
                     setCurrentCardIndex((prev) => (prev + 1) % attachmentItems.length);
                   };
                   
                   const prevCard = () => {
                     setCurrentCardIndex((prev) => (prev - 1 + attachmentItems.length) % attachmentItems.length);
                   };
                  
                  // 統一使用黑金色系，移除優先級顏色區分
                  const getCardStyle = () => {
                    return 'border-gold-600 bg-primary-700/50';
                  };
                  
                  const getStatusColor = (completed) => {
                    return completed ? 'text-green-400' : 'text-gold-400';
                  };
                  
                  return (
                    <div className="bg-primary-700/40 rounded-lg border border-gold-700 overflow-hidden">
                      {/* 卡片導航指示器 */}
                      <div className="flex items-center justify-between p-3 border-b border-gold-700/50">
                        <div className="flex gap-1">
                          {attachmentItems.map((_, index) => (
                            <button
                              key={index}
                              onClick={() => setCurrentCardIndex(index)}
                              className={`w-2 h-2 rounded-full transition-colors ${
                                index === currentCardIndex ? 'bg-gold-400' : 'bg-gold-700'
                              }`}
                            />
                          ))}
                        </div>
                        <div className="text-xs text-gold-300">
                          {currentCardIndex + 1} / {attachmentItems.length}
                        </div>
                      </div>
                      
                      {/* 主要卡片內容 */}
                      <div className="relative">
                        <div className="px-12 py-6 max-h-96 overflow-y-auto">
                          <div className={`rounded-lg border-2 p-6 transition-all duration-300 ${
                            getCardStyle()
                          }`}>
                            {/* 卡片標題區 */}
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex-1 pr-4">
                                <div className="flex items-center gap-3 mb-2">
                                  {currentCard.completed ? (
                                    <CheckCircleIcon className="h-7 w-7 text-green-400" />
                                  ) : (
                                    <ClockIcon className="h-7 w-7 text-gold-400" />
                                  )}
                                  <h3 className={`text-xl font-bold ${
                                    getStatusColor(currentCard.completed)
                                  }`}>
                                    {currentCard.title}
                                  </h3>
                                </div>
                                <p className="text-base text-gold-300 mb-2 font-medium">{currentCard.subtitle}</p>
                                <p className="text-sm text-gold-400 mb-3 leading-relaxed">{currentCard.description}</p>
                                {/* 可勾選執行項目 */}
                                {currentCard.checklistItems && currentCard.checklistItems.length > 0 && (
                                  <div className="mt-3">
                                    <div className="text-sm text-gold-300 mb-3 font-semibold">教練需執行：</div>
                                    <div className="space-y-3">
                                      {currentCard.checklistItems.map((item, index) => {
                                        // 處理字符串類型的項目
                                        if (typeof item === 'string') {
                                          return (
                                            <div key={index} className="flex items-start">
                                              <button
                                                onClick={() => handleChecklistToggle(currentCard.id, `item_${index}`)}
                                                className={`flex-shrink-0 w-5 h-5 rounded border-2 mr-3 mt-0.5 transition-colors ${
                                                  checklistStates[currentCard.id]?.[`item_${index}`] 
                                                    ? 'bg-green-500 border-green-500' 
                                                    : 'border-gold-400 hover:border-gold-300'
                                                }`}
                                              >
                                                {checklistStates[currentCard.id]?.[`item_${index}`] && (
                                                  <CheckCircleIcon className="h-4 w-4 text-white" />
                                                )}
                                              </button>
                                              <span className={`text-sm leading-relaxed ${
                                                checklistStates[currentCard.id]?.[`item_${index}`] 
                                                  ? 'text-green-300 line-through' 
                                                  : 'text-gold-400'
                                              }`}>
                                                {index + 1}. {item}
                                              </span>
                                            </div>
                                          );
                                        }
                                        
                                        // 處理對象類型的項目（包含自動偵測功能）
                                        return (
                                          <div key={item.id || index} className="space-y-2">
                                            <div className="flex items-start">
                                              {item.type === 'auto_detect' ? (
                                                // 自動偵測項目顯示狀態圖標
                                                <div className={`flex-shrink-0 w-5 h-5 rounded border-2 mr-3 mt-0.5 ${
                                                  item.completed 
                                                    ? 'bg-green-500 border-green-500' 
                                                    : 'bg-red-500 border-red-500'
                                                }`}>
                                                  {item.completed ? (
                                                    <CheckCircleIcon className="h-4 w-4 text-white" />
                                                  ) : (
                                                    <XCircleIcon className="h-4 w-4 text-white" />
                                                  )}
                                                </div>
                                              ) : item.type === 'core_members_list' ? (
                                                // 核心會員名單項目顯示信息圖標
                                                <div className="flex-shrink-0 w-5 h-5 rounded border-2 mr-3 mt-0.5 border-blue-400 bg-blue-500/20">
                                                  <ClipboardDocumentListIcon className="h-4 w-4 text-blue-400" />
                                                </div>
                                              ) : item.type === 'staff_members_list' ? (
                                                // 干部會員名單項目顯示信息圖標
                                                <div className="flex-shrink-0 w-5 h-5 rounded border-2 mr-3 mt-0.5 border-purple-400 bg-purple-500/20">
                                                  <ClipboardDocumentListIcon className="h-4 w-4 text-purple-400" />
                                                </div>
                                              ) : (
                                                // 普通可勾選項目
                                                <button
                                                  onClick={() => handleChecklistToggle(currentCard.id, item.id)}
                                                  className={`flex-shrink-0 w-5 h-5 rounded border-2 mr-3 mt-0.5 transition-colors ${
                                                    checklistStates[currentCard.id]?.[item.id] 
                                                      ? 'bg-green-500 border-green-500' 
                                                      : 'border-gold-400 hover:border-gold-300'
                                                  }`}
                                                >
                                                  {checklistStates[currentCard.id]?.[item.id] && (
                                                    <CheckCircleIcon className="h-4 w-4 text-white" />
                                                  )}
                                                </button>
                                              )}
                                              <div className="flex-1">
                                                <span className={`text-sm leading-relaxed ${
                                                  item.type === 'auto_detect' 
                                                    ? (item.completed ? 'text-green-300' : 'text-red-300')
                                                    : item.type === 'core_members_list'
                                                      ? 'text-blue-300'
                                                      : item.type === 'staff_members_list'
                                                        ? 'text-purple-300'
                                                        : (checklistStates[currentCard.id]?.[item.id] 
                                                            ? 'text-green-300 line-through' 
                                                            : 'text-gold-400')
                                                }`}>
                                                  {index + 1}. {item.text}
                                                </span>
                                                {item.subtext && (
                                                  <div className="mt-2 text-xs text-gold-500 leading-relaxed bg-primary-800/30 p-2 rounded border border-gold-700/30">
                                                    {item.subtext}
                                                  </div>
                                                )}
                                                {/* 進度條 */}
                                                {item.progressBar && (
                                                  <div className="mt-2">
                                                    <div className="flex items-center justify-between mb-1">
                                                      <span className="text-xs text-gold-400">填寫進度</span>
                                                      <span className="text-xs text-gold-300 font-semibold">{item.progressBar.label}</span>
                                                    </div>
                                                    <div className="w-full h-2 bg-primary-700 rounded">
                                                      <div 
                                                        className={`h-2 rounded transition-all duration-300 ${
                                                          item.progressBar.color === 'green' ? 'bg-green-500' : 
                                                          item.progressBar.color === 'yellow' ? 'bg-yellow-500' : 'bg-red-500'
                                                        }`} 
                                                        style={{ width: `${item.progressBar.value}%` }} 
                                                      />
                                                    </div>
                                                    <div className="mt-1 text-[10px] text-gold-500">{item.progressBar.value}% 完成</div>
                                                  </div>
                                                )}
                                                {/* 核心會員名單 */}
                                                {item.type === 'core_members_list' && (
                                                  <div className="mt-3">
                                                    {item.loading ? (
                                                      <div className="text-xs text-gold-400">載入核心會員名單中...</div>
                                                    ) : item.coreMembers && item.coreMembers.length > 0 ? (
                                                      <div className="space-y-2">
                                                        <div className="text-xs text-gold-300 font-semibold">核心會員名單：</div>
                                                        <div className="grid grid-cols-1 gap-2 max-h-32 overflow-y-auto">
                                                          {item.coreMembers.map((member, memberIndex) => (
                                                            <div key={member.id || memberIndex} className="flex items-center justify-between bg-primary-800/40 p-2 rounded border border-gold-700/30">
                                                              <div className="flex items-center space-x-2">
                                                                <Avatar 
                                                                  src={member.profilePicture} 
                                                                  name={member.name} 
                                                                  size="sm" 
                                                                />
                                                                <div>
                                                                  <div className="text-xs text-gold-300 font-medium">{member.name}</div>
                                                                  <div className="text-[10px] text-gold-500">{member.industry || member.company}</div>
                                                                </div>
                                                              </div>
                                                              <button
                                                                onClick={() => handleChecklistToggle(currentCard.id, `core_member_${member.id}`)}
                                                                className={`w-4 h-4 rounded border transition-colors ${
                                                                  checklistStates[currentCard.id]?.[`core_member_${member.id}`] 
                                                                    ? 'bg-green-500 border-green-500' 
                                                                    : 'border-gold-400 hover:border-gold-300'
                                                                }`}
                                                              >
                                                                {checklistStates[currentCard.id]?.[`core_member_${member.id}`] && (
                                                                  <CheckCircleIcon className="h-3 w-3 text-white" />
                                                                )}
                                                              </button>
                                                            </div>
                                                          ))}
                                                        </div>
                                                      </div>
                                                    ) : (
                                                      <div className="text-xs text-gold-500">暫無核心會員資料</div>
                                                    )}
                                                  </div>
                                                )}
                                                {/* 干部會員名單 */}
                                                {item.type === 'staff_members_list' && (
                                                  <div className="mt-3">
                                                    {staffMembersLoading ? (
                                                      <div className="text-xs text-gold-400">載入干部會員名單中...</div>
                                                    ) : staffMembers && staffMembers.length > 0 ? (
                                                      <div className="space-y-2">
                                                        <div className="text-xs text-purple-300 font-semibold">干部會員名單：</div>
                                                        <div className="grid grid-cols-1 gap-2 max-h-32 overflow-y-auto">
                                                          {staffMembers.map((member, memberIndex) => (
                                                            <div key={member.id || memberIndex} className="flex items-center justify-between bg-primary-800/40 p-2 rounded border border-purple-700/30">
                                                              <div className="flex items-center space-x-2">
                                                                <Avatar 
                                                                  src={member.profilePicture} 
                                                                  name={member.name} 
                                                                  size="sm" 
                                                                />
                                                                <div>
                                                                  <div className="text-xs text-purple-300 font-medium">{member.name}</div>
                                                                  <div className="text-[10px] text-purple-500">{member.industry || member.company}</div>
                                                                </div>
                                                              </div>
                                                              <button
                                                                onClick={() => handleChecklistToggle(currentCard.id, `staff_member_${member.id}`)}
                                                                className={`w-4 h-4 rounded border transition-colors ${
                                                                  checklistStates[currentCard.id]?.[`staff_member_${member.id}`] 
                                                                    ? 'bg-green-500 border-green-500' 
                                                                    : 'border-purple-400 hover:border-purple-300'
                                                                }`}
                                                              >
                                                                {checklistStates[currentCard.id]?.[`staff_member_${member.id}`] && (
                                                                  <CheckCircleIcon className="h-3 w-3 text-white" />
                                                                )}
                                                              </button>
                                                            </div>
                                                          ))}
                                                        </div>
                                                      </div>
                                                    ) : (
                                                      <div className="text-xs text-purple-500">暫無干部會員資料</div>
                                                    )}
                                                  </div>
                                                )}
                                              </div>
                                            </div>
                                          </div>
                                        );
                                      })}
                                    </div>
                                  </div>
                                )}

                                {/* 詳細信息列表 */}
                                {currentCard.details && currentCard.details.length > 0 && !currentCard.checklistItems && (
                                  <div className="mt-3">
                                    <div className="text-sm text-gold-300 mb-2 font-semibold">詳細內容：</div>
                                    <ul className="text-sm text-gold-400 space-y-3">
                                      {currentCard.details.map((detail, index) => (
                                        <li key={index} className="flex items-start">
                                          {typeof detail === 'object' && detail.type === 'checkbox' ? (
                                            <div className="w-full">
                                              <div className="flex items-start">
                                                <input 
                                                  type="checkbox" 
                                                  id={`detail-${index}`}
                                                  checked={getCheckboxState(selectedMember.id, currentCard.id, detail.id, detail.completed)}
                                                  onChange={(e) => {
                                                    const newState = e.target.checked;
                                                    updateCheckboxState(selectedMember.id, currentCard.id, detail.id, newState);
                                                    console.log(`Toggle checkbox for ${detail.id}: ${newState}`);
                                                  }}
                                                  className="mt-1 mr-3 h-4 w-4 text-gold-500 bg-primary-700 border-gold-600 rounded focus:ring-gold-500 focus:ring-2"
                                                />
                                                <div className="flex-1">
                                                  <label htmlFor={`detail-${index}`} className="leading-relaxed font-medium cursor-pointer">
                                                    {detail.text}
                                                  </label>
                                                  {detail.subtext && (
                                                    <div className="mt-2 text-xs text-gold-500 leading-relaxed whitespace-pre-line bg-primary-800/30 p-2 rounded border border-gold-700/30">
                                                      {detail.subtext}
                                                    </div>
                                                  )}
                                                  {/* 服裝儀容範例 */}
                                                  {detail.id === 'dress_code' && (
                                                    <div className="mt-3">
                                                      <DressCodeExamples />
                                                    </div>
                                                  )}
                                                </div>
                                              </div>
                                            </div>
                                          ) : (
                                            <>
                                              <span className="text-gold-500 mr-2 text-base">•</span>
                                              <span className="leading-relaxed">{typeof detail === 'string' ? detail : detail.text}</span>
                                            </>
                                          )}
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                )}

                                {/* 郵件模板和發信功能 */}
                                {currentCard.emailTemplate && (
                                  <div className="mt-4 p-4 bg-primary-600/30 rounded-lg border border-gold-600/30">
                                    <div className="text-sm text-gold-300 mb-2 font-semibold">郵件模板：</div>
                                    <div className="text-xs text-gold-400 mb-3 leading-relaxed whitespace-pre-line bg-primary-800/50 p-3 rounded border max-h-32 overflow-y-auto">
                                      {currentCard.emailTemplate}
                                    </div>
                                    <div className="flex gap-2">
                                      <button
                                        onClick={() => copyEmailTemplate(currentCard.emailTemplate, selectedMember?.name)}
                                        className="btn-secondary text-xs px-3 py-1.5 flex items-center gap-1"
                                      >
                                        <ClipboardDocumentListIcon className="h-4 w-4" />
                                        一鍵複製
                                      </button>
                                      <button
                                        onClick={() => sendEmail(currentCard.emailTemplate, selectedMember?.email, selectedMember?.name)}
                                        className="btn-primary text-xs px-3 py-1.5 flex items-center gap-1"
                                      >
                                        <EnvelopeIcon className="h-4 w-4" />
                                        發送郵件
                                      </button>
                                    </div>
                                  </div>
                                )}
                              </div>
                              <div className="text-right flex-shrink-0">
                                <div className="text-sm px-3 py-2 rounded-full font-medium bg-gold-600/20 text-gold-200 border border-gold-600">
                                  {currentCard.category}
                                </div>
                              </div>
                            </div>
                            
                            {/* 狀態顯示 */}
                            {currentCard.completed && (
                              <div className="flex items-center justify-between">
                                <div className="text-base font-bold text-green-400">
                                  ✓ 已完成
                                </div>
                                <div className="text-sm text-green-300 font-medium">
                                  狀態良好
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* 左右切換按鈕 */}
                        <button
                          onClick={prevCard}
                          className="absolute left-1 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full bg-primary-600/90 border border-gold-600 flex items-center justify-center hover:bg-primary-500 transition-colors shadow-lg backdrop-blur-sm"
                        >
                          <ChevronLeftIcon className="h-5 w-5 text-gold-300" />
                        </button>
                        <button
                          onClick={nextCard}
                          className="absolute right-1 top-1/2 -translate-y-1/2 w-10 h-10 rounded-full bg-primary-600/90 border border-gold-600 flex items-center justify-center hover:bg-primary-500 transition-colors shadow-lg backdrop-blur-sm"
                        >
                          <ChevronRightIcon className="h-5 w-5 text-gold-300" />
                        </button>
                      </div>
                      
                      {/* 底部統計 */}
                      <div className="p-3 border-t border-gold-700/50 bg-primary-800/50">
                        <div className="flex items-center justify-between text-xs">
                          <div className="text-gold-300">
                            已完成: {attachmentItems.filter(item => item.completed).length} / {attachmentItems.length}
                          </div>
                          <div className="text-gold-400">
                            完成率: {Math.round((attachmentItems.filter(item => item.completed).length / attachmentItems.length) * 100)}%
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })()}
              </div>

              {/* 快捷操作 */}
              <div className="mt-6">
                {/* 快捷操作 */}
                <div className="text-xl font-bold text-gold-100 mb-3">快捷操作</div>
                


                {/* 快捷操作 */}
                <div className="mt-3 flex flex-wrap gap-2">
                  <a
                    href={`/meetings?schedule_with=${selectedMember.id}`}
                    className="btn-secondary inline-flex items-center text-base px-4 py-2"
                  >
                    <CalendarIcon className="h-5 w-5 mr-1" /> 安排會議
                  </a>
                  <Link
                    to={`/members/${selectedMember.id}`}
                    className="btn-secondary text-base px-4 py-2"
                  >
                    查看詳情
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CoachDashboard;