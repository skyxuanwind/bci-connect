name: Build Launchers

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up temporary keychain and import Developer ID certificate
        if: ${{ secrets.MAC_CERT_BASE64 && secrets.MAC_CERT_PASSWORD && secrets.MAC_KEYCHAIN_PASSWORD }}
        run: |
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "$MAC_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$MAC_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "$MAC_CERT_BASE64" | base64 --decode > "$RUNNER_TEMP/cert.p12"
          security import "$RUNNER_TEMP/cert.p12" -k "$KEYCHAIN_PATH" -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          # Prepend our keychain to the search list so codesign can find the identity
          security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | tr -d '"')
          security find-identity -v -p codesigning
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}

      - name: Build macOS .app (codesign if SIGN_IDENTITY provided)
        env:
          SIGN_IDENTITY: ${{ secrets.MAC_SIGN_IDENTITY }}
        run: |
          chmod +x scripts/macos/build_mac_app.sh
          scripts/macos/build_mac_app.sh

      - name: Notarize with App Store Connect API key (notarytool)
        if: ${{ secrets.AC_API_KEY_ID && secrets.AC_API_ISSUER_ID && secrets.AC_API_KEY_P8_BASE64 }}
        run: |
          API_KEY_PATH="$RUNNER_TEMP/AuthKey_${AC_API_KEY_ID}.p8"
          echo "$AC_API_KEY_P8_BASE64" | base64 --decode > "$API_KEY_PATH"
          xcrun notarytool submit "dist/BCI-NFC-Gateway-Launcher-macOS.zip" \
            --key "$API_KEY_PATH" \
            --key-id "$AC_API_KEY_ID" \
            --issuer "$AC_API_ISSUER_ID" \
            --wait
        env:
          AC_API_KEY_ID: ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID: ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_P8_BASE64: ${{ secrets.AC_API_KEY_P8_BASE64 }}

      - name: Staple ticket and re-zip app (post-notarization)
        if: ${{ secrets.AC_API_KEY_ID && secrets.AC_API_ISSUER_ID && secrets.AC_API_KEY_P8_BASE64 }}
        run: |
          xcrun stapler staple "dist/BCI-NFC-Gateway-Launcher.app"
          cd dist
          rm -f BCI-NFC-Gateway-Launcher-macOS.zip
          zip -r BCI-NFC-Gateway-Launcher-macOS.zip BCI-NFC-Gateway-Launcher.app

      - name: Upload macOS app (zip)
        uses: actions/upload-artifact@v4
        with:
          name: BCI-NFC-Gateway-macOS
          path: dist/BCI-NFC-Gateway-Launcher-macOS.zip

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Windows EXE
        shell: pwsh
        run: |
          powershell -NoProfile -ExecutionPolicy Bypass -File "scripts/windows/build_windows_exe.ps1"
      - name: Upload Windows EXE
        uses: actions/upload-artifact@v4
        with:
          name: BCI-NFC-Gateway-Windows
          path: dist/BCI-NFC-Gateway-Launcher-Windows.exe

  release:
    needs: [macos, windows]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: BCI-NFC-Gateway-macOS
          path: dist
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: BCI-NFC-Gateway-Windows
          path: dist
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/BCI-NFC-Gateway-Launcher-macOS.zip
            dist/BCI-NFC-Gateway-Launcher-Windows.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}